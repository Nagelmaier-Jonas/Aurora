@page "/convoybuilder"
@using Domain.LogicHandlers
@using Domain.LogicHandlers.Exceptions
@using Domain.Repositories
@using Model.Entities
@using Domain
@inject ISnackbar Snackbar
@inject IRepository<Convoy> _convoyRepository
@inject IRepository<Wagon> _wagonRepository
@inject IRepository<Truck> _truckRepository
@inject IRepository<Addon> _addonRepository
@inject IDialogService DialogService

<MudImage Src="images/bg.png" Alt="Theme Picture" Style="height: 100vh; width: 100vw; position: fixed;"/>
<MudImage Src="images/title.png" Alt="Theme Picture" Style="width: 30% !important; height: 40px; position: fixed !important; margin: auto !important; right: 35%; top: 70px;"/>
<MudButton Class="float-end position-fixed nav-btn" OnClick="@(() => _savePanel = true)" Variant="Variant.Text" Color="Color.Tertiary" EndIcon="@Icons.Filled.Save" Style="z-index: 9999; width: 64px; height: 64px; margin: 0 auto !important;"></MudButton>

<div Style="position: absolute; bottom: 0 !important; height: 416px; width: 100% !important; background-color: #1a1e21">
    <MudTabs Elevation="2" Centered="true" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6 h-100" Color="Color.Dark" Style="height: 100%;" @ref="tabs">
        <MudTabPanel Text="Trucks" Disabled="@NegateBool(_addonDisabled)">
            <MudCarousel Class="mud-width-full" AutoCycle="false" TData="object" Style="height: 100%;">
                <BulletTemplate Context="selected">
                    <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                        <span class="mud-icon-button-label">
                            <MudIcon Icon="@(selected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Circle)" Color="@Color.Info"/>
                        </span>
                    </div>
                </BulletTemplate>
                <PreviousButtonTemplate>
                    <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                        <span class="mud-icon-button-label">
                            <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.SkipPrevious" Color="@Color.Info"/>
                        </span>
                    </div>
                </PreviousButtonTemplate>
                <NextButtonTemplate>
                    <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                        <span class="mud-icon-button-label">
                            <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.SkipNext" Color="@Color.Info"/>
                        </span>
                    </div>
                </NextButtonTemplate>
                <ChildContent>
                    @foreach (var truck in AllEntities.Trucks()){
                        <MudCarouselItem Class="m-2 col" Style="text-align: -webkit-center;">
                            <MudCard Style="height: 100% !important; background-color: transparent !important;">
                                <MudCardMedia Image=@truck.Image Style="height: 50% !important; width: 215px;"/>
                                <MudCardContent Style="height: 20% !important;">
                                    <MudText Typo="Typo.h5" Style="color: white;">@truck.Code</MudText>
                                </MudCardContent>
                                <MudCardActions Style="height: 20% !important;">
                                    <MudButton Variant="Variant.Text" Color="Color.Success" EndIcon="@Icons.Outlined.Add" OnClick="() => AddTruck(truck)">Add</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudCarouselItem>
                    }
                </ChildContent>
            </MudCarousel>
        </MudTabPanel>
        <MudTabPanel Text="Wagons" Disabled="@NegateBool(_addonDisabled)">
            <MudCarousel Class="mud-width-full" AutoCycle="false" TData="object" Style="height: 100%;">
                <BulletTemplate Context="selected">
                    <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                        <span class="mud-icon-button-label">
                            <MudIcon Icon="@(selected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Circle)" Color="@Color.Info"/>
                        </span>
                    </div>
                </BulletTemplate>
                <PreviousButtonTemplate>
                    <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                        <span class="mud-icon-button-label">
                            <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.SkipPrevious" Color="@Color.Info"/>
                        </span>
                    </div>
                </PreviousButtonTemplate>
                <NextButtonTemplate>
                    <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                        <span class="mud-icon-button-label">
                            <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.SkipNext" Color="@Color.Info"/>
                        </span>
                    </div>
                </NextButtonTemplate>
                <ChildContent>
                    @foreach (var wagon in AllEntities.Wagons()){
                        <MudCarouselItem Class="m-2 col" Style="text-align: -webkit-center;">
                            <MudCard Style="height: 100% !important; background-color: transparent !important;">
                                <MudCardMedia Image=@wagon.Image Style="height: 50% !important; width: 215px;"/>
                                <MudCardContent Style="height: 20% !important;">
                                    <MudText Typo="Typo.h5" Style="color: white;">@wagon.Code</MudText>
                                </MudCardContent>
                                <MudCardActions Style="height: 20% !important;">
                                    <MudButton Variant="Variant.Text" Color="Color.Success" EndIcon="@Icons.Outlined.Add" OnClick="() => AddWagon(wagon, true)">Add to Front</MudButton>
                                    <MudButton Variant="Variant.Text" Color="Color.Success" EndIcon="@Icons.Outlined.Add" OnClick="() => AddWagon(wagon, false)">Add to Back</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudCarouselItem>
                    }
                </ChildContent>
            </MudCarousel>
        </MudTabPanel>
        <MudTabPanel Text="Addons" Disabled="@_addonDisabled">
            <MudCarousel Class="mud-width-full" AutoCycle="false" TData="object" Style="height: 100%;">
                <BulletTemplate Context="selected">
                    <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                        <span class="mud-icon-button-label">
                            <MudIcon Icon="@(selected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Circle)" Color="@Color.Info"/>
                        </span>
                    </div>
                </BulletTemplate>
                <PreviousButtonTemplate>
                    <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                        <span class="mud-icon-button-label">
                            <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.SkipPrevious" Color="@Color.Info"/>
                        </span>
                    </div>
                </PreviousButtonTemplate>
                <NextButtonTemplate>
                    <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                        <span class="mud-icon-button-label">
                            <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.SkipNext" Color="@Color.Info"/>
                        </span>
                    </div>
                </NextButtonTemplate>
                <ChildContent>
                    @foreach (var addon in AllEntities.Addons()){
                        <MudCarouselItem Class="m-2 col" Style="text-align: -webkit-center;">
                            <MudCard Style="height: 100% !important; background-color: transparent !important;">
                                <MudCardMedia Image=@addon.Image Style="height: 50% !important; width: 215px;"/>
                                <MudCardContent Style="height: 20% !important;">
                                    <MudText Typo="Typo.h5" Style="color: white;">@addon.Code</MudText>
                                </MudCardContent>
                                <MudCardActions Style="height: 20% !important;">
                                    <MudButton Variant="Variant.Text" Color="Color.Success" EndIcon="@Icons.Outlined.Add" OnClick="() => AddAddon(addon)">Add</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudCarouselItem>
                    }
                </ChildContent>
            </MudCarousel>
        </MudTabPanel>
    </MudTabs>

</div>

<MudPopover Style="background-color: transparent; height: 460px" Class="mt-16" Open="@_convoyIsOpen" Fixed="true" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
    <MudContainer Class="d-flex overflow-auto">
        <MudCard Class="m-2" Style="min-width: 300px !important;">
            @if (Convoy.FrontTruck is not null){
                @if (Convoy.FrontTruck.IsAddonPresent()){
                    <MudCardMedia Image=@Convoy.FrontTruck.Addon.Image Height="170"/>
                    <MudCardMedia Image=@Convoy.FrontTruck.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@Convoy.FrontTruck.Code</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="@(() => Convoy.FrontTruck.RemoveAddon())">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="RemoveLeadTruck">Delete</MudButton>
                    </MudCardActions>
                }
                else{
                    <MudCardMedia Image=@("cards/empty.png") Height="170"/>
                    <MudCardMedia Image=@Convoy.FrontTruck.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@Convoy.FrontTruck.Code</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Outlined.Add" OnClick="@(() => OpenTruckAddons(Convoy.FrontTruck))">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="RemoveLeadTruck">Delete</MudButton>
                    </MudCardActions>
                }
            }
        </MudCard>

        @foreach (var wagon in Convoy.GetWagonIterator()){
            <MudCard Class="m-2" Style="min-width: 300px !important;">
                @if (wagon.IsAddonPresent()){
                    <MudCardMedia Image=@wagon.Addon.Image Height="170"/>
                    <MudCardMedia Image=@wagon.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@wagon.Code</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="@(() => wagon.RemoveAddon())">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="() => Convoy.RemoveWagon(wagon)">Delete</MudButton>
                    </MudCardActions>
                }
                else{
                    <MudCardMedia Image=@("cards/empty.png") Height="170"/>
                    <MudCardMedia Image=@wagon.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@wagon.Code</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Outlined.Add" OnClick="@(() => OpenWagonAddons(wagon))">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="() => Convoy.RemoveWagon(wagon)">Delete</MudButton>
                    </MudCardActions>
                }
            </MudCard>
        }


        @if (Convoy.BackTruck is not null){
            <MudCard Class="m-2" Style="min-width: 300px !important;">
                @if (Convoy.BackTruck.IsAddonPresent()){
                    <MudCardMedia Image=@Convoy.BackTruck.Addon.Image Height="170"/>
                    <MudCardMedia Image=@Convoy.BackTruck.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@Convoy.BackTruck.Code</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="@(() => Convoy.BackTruck.RemoveAddon())">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="Convoy.RemoveTailTruck">Delete</MudButton>
                    </MudCardActions>
                }
                else{
                    <MudCardMedia Image=@("cards/empty.png") Height="170"/>
                    <MudCardMedia Image=@Convoy.BackTruck.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@Convoy.BackTruck.Code</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Outlined.Add" OnClick="@(() => OpenTruckAddons(Convoy.BackTruck))">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="Convoy.RemoveTailTruck">Delete</MudButton>
                    </MudCardActions>
                }
            </MudCard>
        }

    </MudContainer>
</MudPopover>

<MudPopover Open="@_savePanel" Class="screen-center">
    <MudPaper Class="pa-4">
        <MudTextField @bind-Value="Convoy.Code" Label="Convoy Name" Variant="Variant.Outlined" Immediate="true"></MudTextField>
        <MudButton Variant="Variant.Filled" OnClick="ProcessSomething">Save</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="Cancel">Cancel</MudButton>
    </MudPaper>
</MudPopover>

@code {
    public Convoy Convoy { get; set; } = new();
    public Truck CurrentTruck { get; set; }
    public Wagon CurrentWagon { get; set; }
    
    MudTabs tabs;

    private bool _addonDisabled = true;
    private bool _savePanel;
    private bool _convoyIsOpen;
    private int _money = 400;

    public bool CheckConvoy(){
        return Convoy.FrontTruck is not null;
    }

    public void AddWagon(Wagon wagon, bool front){
        try{
            Convoy.AddWagon(wagon, front);
        }
        catch (ConvoyManagementException e){
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    public void AddTruck(Truck truck){
        try{
            Convoy.AddTruck(truck);
        }
        catch (ConvoyManagementException e){
            Snackbar.Add(e.Message, Severity.Error);
        }
        _convoyIsOpen = CheckConvoy();
    }

    public void RemoveLeadTruck(){
        Convoy.RemoveFrontTruck();
        _convoyIsOpen = CheckConvoy();
    }

    private void OpenTruckAddons(Truck truck){
        tabs.ActivePanelIndex = 2;
        _addonDisabled = false;
        CurrentTruck = truck;
    }

    private void OpenWagonAddons(Wagon wagon){
        tabs.ActivePanelIndex = 2;
        _addonDisabled = false;
        CurrentWagon = wagon;
    }

    private void AddAddon(Addon addon){
        if (CurrentTruck is not null){
            CurrentTruck.AddAddon(addon);
            CurrentTruck = null;
            _addonDisabled = true;
        }
        else if (CurrentWagon is not null){
            CurrentWagon.AddAddon(addon);
            CurrentWagon = null;
            _addonDisabled = true;
        }
        tabs.ActivePanelIndex = 0;
    }

    async Task ProcessSomething(){
        _savePanel = false;
        await Save();
        Snackbar.Add("Successfully saved", Severity.Info);
    }

    private async Task Save(){
        await _convoyRepository.UpdateAsync(Convoy);
    }

    private void Cancel(){
        _savePanel = false;
    }
    
    private bool NegateBool(bool value){
        return !value;
    }

}
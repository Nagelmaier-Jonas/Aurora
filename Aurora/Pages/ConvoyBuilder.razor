@page "/convoybuilder"
@using Domain.LogicHandlers.Exceptions
@using Domain.LogicHandlers
@using Domain.Repositories
@using Model.Entities
@using Model.Enums
@using Model.Factories
@using Domain
@inject ISnackbar Snackbar
@inject IRepository<Convoy> _convoyRepository
@inject IRepository<Wagon> _wagonRepository
@inject IRepository<Truck> _truckRepository
@inject IRepository<Addon> _addonRepository
@inject IDialogService DialogService

<MudImage Src="images/bg.png" Alt="Theme Picture" Style="height: 100vh; width: 100vw; position: fixed;"/>
<MudImage Src="images/title.png" Alt="Theme Picture" Style="width: 30% !important; height: 40px; position: fixed !important; margin: auto !important; right: 35%; top: 70px;"/>

<MudButton Class="float-end position-sticky mt-16" Disabled="@_processing" OnClick="@(() => _codeIsOpen = true)" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@_saveIcon">
    @if (_processing){
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
        <MudText Class="ms-2">Processing</MudText>
    }
    else{
        <MudText>Save</MudText>
    }
</MudButton>


<MudItem style="height: 500px !important;">
</MudItem>


<MudTabs Elevation="2" Centered="true" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Class="mt-16">
    <MudTabPanel Text="Trucks">
        <MudContainer Class="d-flex row">
            @foreach (var truck in AllEntities.Trucks()){
                <MudCard Class="m-2 col" Style="min-width: 300px !important;">
                    <MudCardMedia Image=@truck.Image Width="230" Height="210"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@truck.Code</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Outlined.Add" OnClick="() => AddTruck(truck)">Add</MudButton>
                    </MudCardActions>
                </MudCard>
            }
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="Wagons">
        <MudContainer Class="d-flex row">
            @foreach (var wagon in AllEntities.Wagons()){
                <MudCard Class="m-2 col" Style="min-width: 300px !important;">
                    <MudCardMedia Image=@wagon.Image Height="210"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@wagon.Code</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Outlined.Add" OnClick="() => AddWagon(wagon, true)">Add to Front</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Outlined.Add" OnClick="() => AddWagon(wagon, false)">Add to Back</MudButton>
                    </MudCardActions>
                </MudCard>
            }
        </MudContainer>
    </MudTabPanel>
</MudTabs>

<MudPopover Style="background-color: transparent; height: 460px" Class="mt-16" Open="@_convoyIsOpen" Fixed="false" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter">
    <MudContainer Class="d-flex overflow-auto">
        <MudCard Class="m-2" Style="min-width: 300px !important;">
            @if (Convoy.FrontTruck is not null){
                @if (Convoy.FrontTruck.IsAddonPresent()){
                    <MudCardMedia Image=@Convoy.FrontTruck.Addon.Image Height="170"/>
                    <MudCardMedia Image=@Convoy.FrontTruck.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@Convoy.FrontTruck.Code</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="@(() => Convoy.FrontTruck.RemoveAddon())">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="RemoveLeadTruck">Delete</MudButton>
                    </MudCardActions>
                }
                else{
                    <MudCardMedia Image=@("cards/empty.png") Height="170"/>
                    <MudCardMedia Image=@Convoy.FrontTruck.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@Convoy.FrontTruck.Code</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Outlined.Add" OnClick="@(() => OpenTruckAddons(Convoy.FrontTruck))">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="RemoveLeadTruck">Delete</MudButton>
                    </MudCardActions>
                }
            }
        </MudCard>

        @foreach (var wagon in Convoy.GetWagonIterator()){
            <MudCard Class="m-2" Style="min-width: 300px !important;">
                @if (wagon.IsAddonPresent()){
                    <MudCardMedia Image=@wagon.Addon.Image Height="170"/>
                    <MudCardMedia Image=@wagon.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@wagon.Code</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="@(() => wagon.RemoveAddon())">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="() => Convoy.RemoveWagon(wagon)">Delete</MudButton>
                    </MudCardActions>
                }
                else{
                    <MudCardMedia Image=@("cards/empty.png") Height="170"/>
                    <MudCardMedia Image=@wagon.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@wagon.Code</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Outlined.Add" OnClick="@(() => OpenWagonAddons(wagon))">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="() => Convoy.RemoveWagon(wagon)">Delete</MudButton>
                    </MudCardActions>
                }
            </MudCard>
        }


        @if (Convoy.BackTruck is not null){
            <MudCard Class="m-2" Style="min-width: 300px !important;">
                @if (Convoy.BackTruck.IsAddonPresent()){
                    <MudCardMedia Image=@Convoy.BackTruck.Addon.Image Height="170"/>
                    <MudCardMedia Image=@Convoy.BackTruck.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@Convoy.BackTruck.Code</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="@(() => Convoy.BackTruck.RemoveAddon())">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="Convoy.RemoveTailTruck">Delete</MudButton>
                    </MudCardActions>
                }
                else{
                    <MudCardMedia Image=@("cards/empty.png") Height="170"/>
                    <MudCardMedia Image=@Convoy.BackTruck.Image Height="170"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@Convoy.BackTruck.Code</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Outlined.Add" OnClick="@(() => OpenTruckAddons(Convoy.BackTruck))">Addon</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" EndIcon="@Icons.Outlined.Remove" OnClick="Convoy.RemoveTailTruck">Delete</MudButton>
                    </MudCardActions>
                }
            </MudCard>
        }

    </MudContainer>
</MudPopover>

<MudPopover Open="@_addonIsOpen" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.BottomCenter">
    <MudContainer Class="d-flex overflow-auto">
        @foreach (var addon in AllEntities.Addons()){
            <MudCard Class="m-2" Style="min-width: 300px !important;">
                <MudCardMedia Image=@addon.Image Height="210"/>
                <MudCardContent>
                    <MudText Typo="Typo.h5">@addon.Code</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Outlined.Add" OnClick="() => AddAddon(addon)">Add</MudButton>
                </MudCardActions>
            </MudCard>
        }


    </MudContainer>
</MudPopover>

<MudPopover Open="@_codeIsOpen" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
    <MudPaper Class="pa-4">
        <MudTextField @bind-Value="Convoy.Code" Label="Convoy Name" Variant="Variant.Outlined" Immediate="true"></MudTextField>
        <MudButton Variant="Variant.Filled" OnClick="ProcessSomething">Save</MudButton>
    </MudPaper>
</MudPopover>

@code {
    public Convoy Convoy { get; set; } = new();
    public Truck CurrentTruck { get; set; }
    public Wagon CurrentWagon { get; set; }

    private bool _addonIsOpen = false;
    private bool _codeIsOpen = false;
    private bool _convoyIsOpen = false;
    private int _money = 400;

    public bool CheckConvoy(){
        return Convoy.FrontTruck is not null;
    }

    public void AddWagon(Wagon wagon, bool front){
        try{
            Convoy.AddWagon(wagon, front);
        }
        catch (ConvoyManagementException e){
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    public void AddTruck(Truck truck){
        try{
            Convoy.AddTruck(truck);
        }
        catch (ConvoyManagementException e){
            Snackbar.Add(e.Message, Severity.Error);
        }
        _convoyIsOpen = CheckConvoy();
    }

    public void RemoveLeadTruck(){
        Convoy.RemoveFrontTruck();
        _convoyIsOpen = CheckConvoy();
    }

    private void OpenTruckAddons(Truck truck){
        _addonIsOpen = true;
        CurrentTruck = truck;
    }

    private void OpenWagonAddons(Wagon wagon){
        _addonIsOpen = true;
        CurrentWagon = wagon;
    }

    private void AddAddon(Addon addon)
    {
        CurrentTruck.AddAddon(addon);
        CurrentTruck = null;
        _addonIsOpen = false;
    }

    private bool _processing = false;
    private string _saveIcon = Icons.Filled.Save;

    async Task ProcessSomething(){
        _codeIsOpen = false;
        await Save();
        _saveIcon = " ";
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
        Snackbar.Add("Successfully saved", Severity.Info);
        _saveIcon = Icons.Filled.Save;
    }

    private async Task Save(){
        await _convoyRepository.CreateAsync(Convoy);
    }
}
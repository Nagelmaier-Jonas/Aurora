@page "/convoybuilder/{SessionId:int}"
@using Domain.LogicHandlers.Helper
@inject ISnackbar Snackbar
@inject SessionRepository SessionRepository
@inject IRepository<Convoy> ConvoyRepository
@inject ConvoyRerenderer ConvoyRerenderer
@implements IDisposable

<style>
    .mud-tabs{
      z-index: 20000;
    }
</style>

<MudImage Src="images/bg.png" Alt="Theme Picture" Style="height: 100vh; width: 100vw; position: fixed;"/>
<MudImage Src="images/title.png" Alt="Theme Picture" Style="width: 30% !important; height: 40px; position: fixed !important; margin: auto !important; right: 35%; top: 70px;"/>
<MudButton Class="float-end position-fixed nav-btn" OnClick="@(() => _savePanel = !_savePanel)" Variant="Variant.Text" Color="Color.Tertiary" EndIcon="@Icons.Filled.Save" Style="z-index: 1301; width: 64px; height: 64px; margin: 0 auto !important; left: 50%;"></MudButton>

@if (User is not null){
    <MudPopover Style="background-color: transparent; height: 480px; display: flex;" Class="mt-16 convoy-board" Open="true" Fixed="true" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
        <div Class="session-info">
            <MudText Align="Align.Center">
                <h6>Username:</h6> @Session.User.Name
            </MudText>
            <MudText Align="Align.Center">
                <h6>Convoy Code:</h6> @Session.Convoy.Code
            </MudText>
            <MudText Align="Align.Center">
                <h6>Money:</h6> @Session.Money
            </MudText>
        </div>
        <MudContainer Class="d-flex overflow-auto convoy-container">
            @if (Convoy.FrontTruck is not null){
                <RenderUpgradeable Session="Session" Upgradeable="Convoy.FrontTruck"
                                   ToggleAddons="() => OpenTruckAddons(Convoy.FrontTruck)"
                                   RemoveElement="() => Session.Convoy.RemoveFrontTruck()">
                </RenderUpgradeable>
            }
            @foreach (var wagon in Convoy.GetWagonIterator()){
                <RenderUpgradeable Session="Session" Upgradeable="wagon"
                                   ToggleAddons="() => OpenWagonAddons(wagon)"
                                   RemoveElement="() => Session.Convoy.RemoveWagon(wagon)">
                </RenderUpgradeable>
            }
            @if (Convoy.BackTruck is not null){
                <RenderUpgradeable Session="Session" Upgradeable="Convoy.BackTruck"
                                   ToggleAddons="() => OpenTruckAddons(Convoy.BackTruck)"
                                   RemoveElement="() => Session.Convoy.RemoveTailTruck()"
                                   Reverse="true">
                </RenderUpgradeable>
            }
        </MudContainer>
    </MudPopover>
}

<div Style="position: absolute; bottom: 0 !important; height: 416px; width: 100% !important; background-color: #1a1e21; z-index: 10000;">
    <MudTabs Elevation="2" Centered="true" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6 h-100" Color="Color.Dark" Style="height: 100%;" @ref="tabs">
        <MudTabPanel Text="Trucks" Disabled="@(tabs.ActivePanelIndex != 0 && tabs.ActivePanelIndex != 1)">
            <MudCarousel Class="mud-width-full" AutoCycle="false" TData="object" Style="height: 100%;" BulletsColor="@Color.Info">
                <ChildContent>
                    @foreach (var truck in AllEntities.Trucks()){
                        <MudCarouselItem Class="m-2 col" Style="text-align: -webkit-center;">
                            <MudCard Style="height: 100% !important; background-color: transparent !important;">
                                <MudCardMedia Image=@truck.Image Style="height: 50% !important; width: 215px;"/>
                                <MudCardContent Style="height: 20% !important;">
                                    <MudText Style="color: white; font-size:15px !important;">@truck.Code</MudText>
                                </MudCardContent>
                                <MudCardActions Style="height: 20% !important; justify-content: center;">
                                    <MudButton Variant="Variant.Text" Color="Color.Success" EndIcon="@Icons.Outlined.Add" OnClick="() => AddTruck(truck)">Add</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudCarouselItem>
                    }
                </ChildContent>
            </MudCarousel>
        </MudTabPanel>
        <MudTabPanel Text="Wagons" Disabled="@(tabs.ActivePanelIndex != 0 && tabs.ActivePanelIndex != 1)">
            <MudCarousel Class="mud-width-full" AutoCycle="false" TData="object" Style="height: 100%;" BulletsColor="@Color.Info">
                <ChildContent>
                    @foreach (var wagon in AllEntities.Wagons()){
                        <MudCarouselItem Class="m-2 col" Style="text-align: -webkit-center;">
                            <MudCard Style="height: 100% !important; background-color: transparent !important;">
                                <MudCardMedia Image=@wagon.Image Style="height: 50% !important; width: 215px;"/>
                                <MudCardContent Style="height: 20% !important;">
                                    <MudText Style="color: white; font-size:15px !important;">@wagon.Code</MudText>
                                </MudCardContent>
                                <MudCardActions Style="height: 20% !important; justify-content: center;">
                                    <MudButton Variant="Variant.Text" Color="Color.Success" EndIcon="@Icons.Outlined.Add" OnClick="() => AddWagon(wagon, true)">Add to Front</MudButton>
                                    <MudButton Variant="Variant.Text" Color="Color.Success" EndIcon="@Icons.Outlined.Add" OnClick="() => AddWagon(wagon, false)">Add to Back</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudCarouselItem>
                    }
                </ChildContent>
            </MudCarousel>
        </MudTabPanel>
        <MudTabPanel Text="Addons" Disabled="tabs.ActivePanelIndex != 2">
            <MudCarousel Class="mud-width-full" AutoCycle="false" TData="object" Style="height: 100%;" BulletsColor="@Color.Info">
                <ChildContent>
                    @foreach (var addon in AllEntities.Addons()){
                        <MudCarouselItem Class="m-2 col" Style="text-align: -webkit-center;">
                            <MudCard Style="height: 100% !important; background-color: transparent !important;">
                                <MudCardMedia Image=@addon.Image Style="height: 50% !important; width: 215px;"/>
                                <MudCardContent Style="height: 20% !important;">
                                    <MudText Style="color: white; font-size:15px !important;">@addon.Code</MudText>
                                </MudCardContent>
                                <MudCardActions Style="height: 20% !important; justify-content: center;">
                                    <MudButton Variant="Variant.Text" Color="Color.Success" EndIcon="@Icons.Outlined.Add" OnClick="() => AddAddon(addon)">Add</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudCarouselItem>
                    }
                </ChildContent>
            </MudCarousel>
        </MudTabPanel>
        <MudTabPanel Text="Cargo" Disabled="tabs.ActivePanelIndex != 3">
            <MudCarousel Class="mud-width-full" AutoCycle="false" TData="object" Style="height: 100%;" BulletsColor="@Color.Info">
                <ChildContent>
                    @foreach (var cargo in AllEntities.BuyableCargo()){
                        @if (ConvoyRerenderer.TempSlot.CanAddCargo(Session, cargo)){
                            <MudCarouselItem Class="m-2 col" Style="text-align: -webkit-center;">
                            
                                <MudCard Style="height: 100% !important; background-color: transparent !important;">
                                    <MudCardMedia Image=@cargo.Image Style="height: 50% !important; width: 215px;"/>
                                    <MudCardContent Style="height: 20% !important;">
                                        <MudText Style="color: white; font-size:15px !important;">@cargo.Name</MudText>
                                    </MudCardContent>
                                    <MudCardActions Style="height: 20% !important; justify-content: center;">
                                        <MudButton Variant="Variant.Text" Color="Color.Success" EndIcon="@Icons.Outlined.Add" OnClick="() => AddCargo(cargo)">Add</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudCarouselItem>
                        }
                    }
                </ChildContent>
            </MudCarousel>
        </MudTabPanel>
    </MudTabs>
</div>

@if (_savePanel){
    <MudPaper Class="pa-4 save-field">
        <MudTextField class="save-field-input" @bind-Value="Convoy.Code" Placeholder="Convoy Name" Variant="Variant.Outlined" Immediate="true" MaxLength="50"></MudTextField>
        <MudButton Class="save-field-btn" Variant="Variant.Outlined" OnClick="ProcessSomething">Save</MudButton>
    </MudPaper>
}

@code {

    [Parameter]
    public int SessionId { get; set; }

    public Session Session { get; set; }
    public User User { get; set; }
    public Convoy Convoy { get; set; }
    public Truck CurrentTruck { get; set; }
    public Wagon CurrentWagon { get; set; }

    MudTabs tabs;

    private bool _addonDisabled = true;
    private bool _itemDisabled = true;
    private bool _cargoDisabled = true;
    private bool _savePanel;
    private bool _loadPanel;

    protected override async void OnParametersSet(){
        if (await SessionRepository.ReadAsync(SessionId) == null){
            Snackbar.Add("No Data...");
            return;
        }
        Session = await SessionRepository.ReadSessionGraphAsync(SessionId);
        Convoy = Session.Convoy;
        User = Session.User;
        await InvokeAsync(StateHasChanged);
        ConvoyRerenderer.Rerender += Update;
        ConvoyRerenderer.ChangeActivePanel += SetPanelIndex;
    }
    
    public void SetPanelIndex() => tabs.ActivePanelIndex = ConvoyRerenderer.ActivePanelIndex;

    public async void Update(){
        await InvokeAsync(StateHasChanged);
    }

    public void AddWagon(Wagon wagon, bool front){
        try{
            Convoy.AddWagon(wagon, front);
        }
        catch (ConvoyManagementException e){
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    public void AddTruck(Truck truck){
        try{
            Convoy.AddTruck(truck);
        }
        catch (ConvoyManagementException e){
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    private void OpenTruckAddons(Truck truck){
        tabs.ActivePanelIndex = 2;
        _addonDisabled = false;
        CurrentTruck = truck;
    }

    private void OpenWagonAddons(Wagon wagon){
        tabs.ActivePanelIndex = 2;
        _addonDisabled = false;
        CurrentWagon = wagon;
    }

    private void AddAddon(Addon addon){
        if (CurrentTruck is not null){
            CurrentTruck.AddAddon(addon);
            CurrentTruck = null;
            _addonDisabled = true;
        }
        else if (CurrentWagon is not null){
            CurrentWagon.AddAddon(addon);
            CurrentWagon = null;
            _addonDisabled = true;
        }
        tabs.ActivePanelIndex = 0;
    }

    private void AddCargo(ACargo cargo){
        ConvoyRerenderer.TempSlot.AddCargo(Session, cargo);
        ConvoyRerenderer.TempSlot = null;
        tabs.ActivePanelIndex = 0;
        ConvoyRerenderer.Update();
    }

    async Task ProcessSomething(){
        _savePanel = false;
        await Save();
        Snackbar.Add("Successfully saved", Severity.Info);
    }

    private async Task Save(){
        await ConvoyRepository.UpdateAsync(Session.Convoy);
    }

    public void Dispose(){
        ConvoyRerenderer.Rerender -= Update;
        ConvoyRerenderer.ChangeActivePanel -= SetPanelIndex;
    }

}

